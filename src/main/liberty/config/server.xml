<?xml version="1.0" encoding="UTF-8"?>
<!-- server.xml: https://openliberty.io/docs/latest/reference/config/server-configuration-overview.html#server-xml -->
<server>
  <featureManager>
    <feature>jakartaee-9.1</feature>
    <feature>microProfile-5.0</feature>
  </featureManager>

  <!--
    These are default values used through the configuration. They will
    be overridden by the Maven build in 
    configDropins/overrides/liberty-plugin-variable-config.xml
    Override with `mvn -Dliberty.var.${NAME}`.
    When changing a default here, it's usually good to change it in
    pom.xml also.
  -->
  <variable name="APP_NAME" defaultValue="libertydiag.war" />
  <variable name="HTTP_PORT" defaultValue="9080" />
  <variable name="HTTPS_PORT" defaultValue="9443" />
  <variable name="TRACE_SPECIFICATION" defaultValue="*=info" />
  <variable name="MAX_TRACE_SIZE_MB" defaultValue="100" />
  <variable name="MAX_TRACE_SIZE_COUNT" defaultValue="2" />
  <variable name="MAX_REQUEST_SECONDS" defaultValue="60" />
  <variable name="HUNG_REQUEST_SECONDS" defaultValue="300" />
  <variable name="REQUEST_TIMING_SAMPLE_RATE" defaultValue="1" />
  <variable name="MAX_CONCURRENT_THREADS" defaultValue="50" />

  <!--
    In a container environment, X_LOG_DIR points to /logs/, but it doesn't 
    exist in a non-container environment, so we point the default to the normal 
    usr/servers/${SERVER}/logs/ directory. Then we can use this variable for
    things like the acccess log.
  -->
  <variable name="X_LOG_DIR" defaultValue="${server.output.dir}/logs" />

  <!-- host="*" allows access from a remote client -->
  <httpEndpoint
    id="defaultHttpEndpoint"
    host="*"
    httpPort="${HTTP_PORT}"
    httpsPort="${HTTPS_PORT}"
  >
    <!-- https://openliberty.io/docs/latest/access-logging.html -->
    <accessLogging
      filepath="${X_LOG_DIR}/http_access.log"
      maxFileSize="${MAX_TRACE_SIZE_MB}"
      maxFiles="${MAX_TRACE_SIZE_COUNT}"
      logFormat="%h %u %t &quot;%r&quot; %s %b %D %{R}W %p %{remote}p"
    />
  </httpEndpoint>

  <!--________________________
    |                        |
    | Security configuration |
    |________________________|
                              -->

  <!-- The <keystore /> is specified in configDropins/defaults/keystore.xml -->

  <!--
    Default SSL configuration enables trust for default certificates from the
    Java runtime.
  -->
  <ssl id="defaultSSLConfig" trustDefaultCerts="true" />

  <basicRegistry id="basic" realm="BasicRealm">
    <user name="admin" password="password" />
    <user name="user1" password="password" />
    <group name="Users">
      <member name="user1" />
    </group>
    <group name="Administrators">
      <member name="admin" />
    </group>
  </basicRegistry>
  
  <administrator-role>
    <group>Administrators</group>
  </administrator-role>

  <!--___________________________
    |                           |
    | Application configuration |
    |___________________________|
                              -->

  <managedExecutorService jndiName="concurrent/executorService1">
    <contextService>
      <jeeMetadataContext />
    </contextService>
    <concurrencyPolicy max="${MAX_CONCURRENT_THREADS}" />
  </managedExecutorService>

  <!-- Automatically expand WAR files and EAR files -->
  <applicationManager autoExpand="true" />

  <!-- Configures the application on a specified context root -->
  <webApplication contextRoot="/" location="${APP_NAME}">
    <application-bnd>
      <security-role name="Administrators">
        <group name="Administrators" />
      </security-role>
      <security-role name="Users">
        <group name="Users" />
      </security-role>
    </application-bnd>
  </webApplication>

  <!--_____________________
    |                     |
    | Other configuration |
    |_____________________|
                           -->

  <!--
    Decide whether administrator authentication (administrator-role) is required
    for /metrics. HTTPS may still be used without authentication.
  -->
  <mpMetrics authentication="false" />

  <!--
    By default, mpMetrics enables all monitor-1.0 metrics. A space for a filter
    disables these metrics and just leaves base and app metrics which has less
    performance overhead. If needed, enable additional metrics by replacing the
    space with a command-delimited list from:
    JVM,ThreadPool,WebContainer,Session,ConnectionPool,REST
  -->
  <monitor filter=" " />

  <!-- Optional usage of requestTiming -->
  <!-- https://openliberty.io/docs/latest/slow-hung-request-detection.html -->
  <featureManager><feature>requestTiming-1.0</feature></featureManager>
  <requestTiming
    slowRequestThreshold="${MAX_REQUEST_SECONDS}s"
    hungRequestThreshold="${HUNG_REQUEST_SECONDS}s"
    sampleRate="${REQUEST_TIMING_SAMPLE_RATE}"
  />

  <!-- https://openliberty.io/docs/latest/log-trace-configuration.html -->
  <logging
    traceSpecification="${TRACE_SPECIFICATION}"
    maxFileSize="${MAX_TRACE_SIZE_MB}"
    maxFiles="${MAX_TRACE_SIZE_COUNT}"
  />

  <!-- 
    persistTimeout: we're assuming LAN-only, pooled connections
    https://publib.boulder.ibm.com/httpserv/cookbook/WebSphere_Application_Server-WAS_Liberty.html#WebSphere_Application_Server_Liberty-HTTP-Keep_Alive_Connections
  -->
  <httpOptions
    persistTimeout="575h"
  />

  <!--
    If the applications don't use resources in META-INF/resources directories of embedded JAR files
    https://www.ibm.com/docs/en/was-liberty/nd?topic=tuning-liberty
  -->
  <webContainer skipMetaInfResourcesProcessing="true" />
</server>
