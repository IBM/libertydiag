<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>libertydiag</artifactId>
  <version>0.1.20221019</version>
  <packaging>war</packaging>

  <!-- Override these with mvn -D${PROPERTY}=${VALUE} -->
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!--____________________
       |                    |
       | Liberty properties |
       |____________________|
                             -->

    <liberty.server.name>${project.artifactId}Server</liberty.server.name>

    <!--
      For background on packaging types, see:
      * https://github.com/OpenLiberty/ci.maven/blob/main/docs/package.md#package
      * https://www.ibm.com/docs/en/was-liberty/nd?topic=line-server-command-options
    -->
    <liberty.packaging.type>minify,runnable</liberty.packaging.type>

    <!-- OpenLiberty (ol) or WebSphere Liberty (wlp): https://github.com/OpenLiberty/ci.maven#build -->
    <runtime>ol</runtime>

    <!--
      These values get generated into liberty-plugin-variable-config.xml which is then
      put into configDropins/overrides.
      When changing a default here, it's usually good to change it in src/main/liberty/config/server.xml also.
    -->
    <liberty.var.APP_NAME>${project.artifactId}.war</liberty.var.APP_NAME>
    <liberty.var.HTTP_PORT>9080</liberty.var.HTTP_PORT>
    <liberty.var.HTTPS_PORT>9443</liberty.var.HTTPS_PORT>
    <liberty.var.MAX_TRACE_SIZE_MB>100</liberty.var.MAX_TRACE_SIZE_MB>
    <liberty.var.MAX_TRACE_SIZE_COUNT>2</liberty.var.MAX_TRACE_SIZE_COUNT>
    <liberty.var.MAX_REQUEST_SECONDS>60</liberty.var.MAX_REQUEST_SECONDS>
    <liberty.var.HUNG_REQUEST_SECONDS>300</liberty.var.HUNG_REQUEST_SECONDS>
    <liberty.var.REQUEST_TIMING_SAMPLE_RATE>1</liberty.var.REQUEST_TIMING_SAMPLE_RATE>
    <liberty.var.MAX_CONCURRENT_THREADS>100</liberty.var.MAX_CONCURRENT_THREADS>
    <liberty.var.TRACE_SPECIFICATION>*=info</liberty.var.TRACE_SPECIFICATION>
    
    <!--____________________________
       |                            |
       | Container build properties |
       |____________________________|
                                     -->

    <image.builder>podman</image.builder>
    <image.name>${project.artifactId}</image.name>
    <image.authors>kevin.grigorenko@us.ibm.com</image.authors>
    <image.summary>Liberty diagnostic web application</image.summary>
    <image.vendor>${image.user}</image.vendor>
    <image.description>libertydiag is a Jakarta EE 9 and MicroProfile 5 web application for simulating diagnostic situations</image.description>
    <image.url>https://github.com/IBM/libertydiag</image.url>
    <image.source>https://github.com/IBM/libertydiag</image.source>

    <!-- image.user is either blank or must be lower case and end with a / -->
    <image.user></image.user>

    <!-- image.repository is either blank or otherwise must end with a / -->
    <image.repository>localhost/</image.repository>

    <image.tag>latest</image.tag>

    <image.build.linux.amd64>true</image.build.linux.amd64>

    <!-- The Liberty images aren't built for arm64 at the time of this writing -->
    <image.build.linux.arm64>false</image.build.linux.arm64>

    <!-- TODO: The Liberty build fails for ppc64le on the `RUN features.sh` step at the time of this writing -->
    <image.build.linux.ppc64le>false</image.build.linux.ppc64le>

    <!-- TODO: The Liberty build fails for s390x on the `RUN features.sh` step at the time of this writing -->
    <image.build.linux.s390x>false</image.build.linux.s390x>

    <image.manifest.repository.push>false</image.manifest.repository.push>

    <image.manifest.repository>quay.io</image.manifest.repository>

    <image.manifest.user>ibm</image.manifest.user>

    <image.manifest.name>${image.name}</image.manifest.name>

    <image.manifest.tag>${image.tag}</image.manifest.tag>

    <!-- Any other arguments to pass to the image builder -->
    <image.builder.arguments></image.builder.arguments>
  </properties>

  <profiles>
    <profile>
      <id>usr-package</id>
      <properties>
        <packaging.type>usr</packaging.type>
      </properties>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <version>9.1.0</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <version>5.0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <!-- Use filtering to put variables into a properties file: https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/maven.properties</include>
        </includes>
      </resource>
    </resources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.10.1</version>
          <configuration>
            <compilerArgs>
              <arg>-Xlint</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.3.2</version>
        </plugin>
        <plugin>
          <groupId>io.openliberty.tools</groupId>
          <artifactId>liberty-maven-plugin</artifactId>
          <version>3.7.1</version>
          <configuration>
            <serverName>${liberty.server.name}</serverName>
            <include>${liberty.packaging.type}</include>
            <mergeServerEnv>true</mergeServerEnv>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <configuration>
            <!--
              Disable the default deploy plugin so that we can
              use the deploy phase to build the container.
            -->
            <skip>true</skip>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>io.openliberty.tools</groupId>
        <artifactId>liberty-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- Run some 'liberty:' goals during the Maven 'package' phase -->
            <phase>package</phase>
            <goals>
              <!-- See https://gitter.im/OpenLiberty/development?at=606d08bc92a3431fd67c7aab -->
              <goal>create</goal>
              <goal>install-feature</goal>
              <goal>deploy</goal>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>deploy</phase>
            <configuration>
              <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                <!-- https://ant.apache.org/manual/Tasks/ -->

                <echo level="info" message="==================" />
                <echo level="info" message="Building container image from ${project.basedir} using ${image.builder}" />

                <!--
                <echo level="info" message="All properties" />
                <echoproperties />
                -->

                <!-- Get commit hash and put it into a variable for an image build argument -->
                <exec
                  dir="${project.basedir}"
                  executable="git"
                  failonerror="true"
                  outputproperty="commit.id"
                >
                  <arg value="rev-parse" />
                  <arg value="HEAD" />
                </exec>

                <!--
                  Run container builds for linux/amd64, linux/ppc64le, and linux/s390x
                  First remove any existing builds from the manifest
                    Ant OS families: https://ant.apache.org/manual/api/org/apache/tools/ant/taskdefs/condition/Os.html
                    "unix" covers macOS
                  Then build each platform. We use <sequential /> as a way to do a block if condition
                -->
                <echo level="info" message="==================" />
                <echo level="info" message="Removing any existing manifests" />
                <exec osfamily="unix" dir="${project.basedir}" executable="./cleanmanifest.sh" failonerror="true">
                  <arg value="${image.builder}" />
                  <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                </exec>
                <exec osfamily="windows" dir="${project.basedir}" executable="cleanmanifest.bat" failonerror="true">
                  <arg value="${image.builder}" />
                  <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                </exec>

                <echo level="info" message="==================" />

                <sequential if:true="${image.build.linux.amd64}">
                  <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/amd64" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="build" />
                    <arg value="--platform" />
                    <arg value="linux/amd64" />
                    <arg value="--build-arg" />
                    <arg value="VERSION=${project.version}" />
                    <arg value="--build-arg" />
                    <arg value="REVISION=${commit.id}" />
                    <arg value="--build-arg" />
                    <arg value="AUTHORS=${image.authors}" />
                    <arg value="--build-arg" />
                    <arg value="VENDOR=${image.vendor}" />
                    <arg value="--build-arg" />
                    <arg value="SUMMARY=${image.summary}" />
                    <arg value="--build-arg" />
                    <arg value="NAME=${image.name}" />
                    <arg value="--build-arg" />
                    <arg value="DESCRIPTION=${image.description}" />
                    <arg value="--build-arg" />
                    <arg value="URL=${image.url}" />
                    <arg value="--build-arg" />
                    <arg value="SOURCE=${image.source}" />
                    <arg value="--build-arg" />
                    <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                    <arg value="--build-arg" />
                    <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                    <!--
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${project.version}" />
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    -->
                    <arg value="--manifest" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    <arg line="${image.builder.arguments}" />
                    <arg value="." />
                  </exec>

                  <echo level="info" message="==================" />
                  <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/amd64" />
                  <echo level="info" message="To run this image:" />
                  <echo level="info" message="  ${image.builder} run --rm --platform linux/amd64 -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  <echo level="info" message="==================" />
                </sequential>

                <sequential if:true="${image.build.linux.arm64}">
                  <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/arm64" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="build" />
                    <arg value="--platform" />
                    <arg value="linux/arm64" />
                    <arg value="--build-arg" />
                    <arg value="VERSION=${project.version}" />
                    <arg value="--build-arg" />
                    <arg value="REVISION=${commit.id}" />
                    <arg value="--build-arg" />
                    <arg value="AUTHORS=${image.authors}" />
                    <arg value="--build-arg" />
                    <arg value="VENDOR=${image.vendor}" />
                    <arg value="--build-arg" />
                    <arg value="SUMMARY=${image.summary}" />
                    <arg value="--build-arg" />
                    <arg value="NAME=${image.name}" />
                    <arg value="--build-arg" />
                    <arg value="DESCRIPTION=${image.description}" />
                    <arg value="--build-arg" />
                    <arg value="URL=${image.url}" />
                    <arg value="--build-arg" />
                    <arg value="SOURCE=${image.source}" />
                    <arg value="--build-arg" />
                    <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                    <arg value="--build-arg" />
                    <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                    <!--
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${project.version}" />
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    -->
                    <arg value="--manifest" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    <arg line="${image.builder.arguments}" />
                    <arg value="." />
                  </exec>

                  <echo level="info" message="==================" />
                  <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/arm64" />
                  <echo level="info" message="To run this image:" />
                  <echo level="info" message="  ${image.builder} run --rm --platform linux/arm64 -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  <echo level="info" message="==================" />
                </sequential>

                <sequential if:true="${image.build.linux.ppc64le}">
                  <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/ppc64le" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="build" />
                    <arg value="--platform" />
                    <arg value="linux/ppc64le" />
                    <arg value="--build-arg" />
                    <arg value="VERSION=${project.version}" />
                    <arg value="--build-arg" />
                    <arg value="REVISION=${commit.id}" />
                    <arg value="--build-arg" />
                    <arg value="AUTHORS=${image.authors}" />
                    <arg value="--build-arg" />
                    <arg value="VENDOR=${image.vendor}" />
                    <arg value="--build-arg" />
                    <arg value="SUMMARY=${image.summary}" />
                    <arg value="--build-arg" />
                    <arg value="NAME=${image.name}" />
                    <arg value="--build-arg" />
                    <arg value="DESCRIPTION=${image.description}" />
                    <arg value="--build-arg" />
                    <arg value="URL=${image.url}" />
                    <arg value="--build-arg" />
                    <arg value="SOURCE=${image.source}" />
                    <arg value="--build-arg" />
                    <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                    <arg value="--build-arg" />
                    <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                    <!--
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${project.version}" />
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    -->
                    <arg value="--manifest" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    <arg line="${image.builder.arguments}" />
                    <arg value="." />
                  </exec>

                  <echo level="info" message="==================" />
                  <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/ppc64le" />
                  <echo level="info" message="To run this image:" />
                  <echo level="info" message="  ${image.builder} run --rm --platform linux/ppc64le -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  <echo level="info" message="==================" />
                </sequential>

                <sequential if:true="${image.build.linux.s390x}">
                  <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/s390x" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="build" />
                    <arg value="--platform" />
                    <arg value="linux/s390x" />
                    <arg value="--build-arg" />
                    <arg value="VERSION=${project.version}" />
                    <arg value="--build-arg" />
                    <arg value="REVISION=${commit.id}" />
                    <arg value="--build-arg" />
                    <arg value="AUTHORS=${image.authors}" />
                    <arg value="--build-arg" />
                    <arg value="VENDOR=${image.vendor}" />
                    <arg value="--build-arg" />
                    <arg value="SUMMARY=${image.summary}" />
                    <arg value="--build-arg" />
                    <arg value="NAME=${image.name}" />
                    <arg value="--build-arg" />
                    <arg value="DESCRIPTION=${image.description}" />
                    <arg value="--build-arg" />
                    <arg value="URL=${image.url}" />
                    <arg value="--build-arg" />
                    <arg value="SOURCE=${image.source}" />
                    <arg value="--build-arg" />
                    <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                    <arg value="--build-arg" />
                    <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                    <!--
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${project.version}" />
                    <arg value="-t" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    -->
                    <arg value="--manifest" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    <arg line="${image.builder.arguments}" />
                    <arg value="." />
                  </exec>

                  <echo level="info" message="==================" />
                  <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/s390x" />
                  <echo level="info" message="To run this image:" />
                  <echo level="info" message="  ${image.builder} run --rm --platform linux/s390x -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  <echo level="info" message="==================" />
                </sequential>

                <!--
                  Finally, we can push these to a remote repository if the argument is set
                -->
                <sequential if:true="${image.manifest.repository.push}">
                  <echo level="info" message="==================" />
                  <echo level="info" message="Logging into ${image.manifest.repository}" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="login" />
                    <arg value="${image.manifest.repository}" />
                  </exec>

                  <echo level="info" message="==================" />
                  <echo level="info" message="Pushing manifest to ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="manifest" />
                    <arg value="push" />
                    <arg value="--all" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    <arg value="docker://${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                  </exec>
                  <echo level="info" message="Pushed manifest successfully. Test with:" />
                  <echo level="info" message="  ${image.builder} run --rm -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                  <echo if:true="${image.manifest.repository}" level="info" message="Quay.io home page is: https://${image.manifest.repository}/repository/${image.manifest.user}/${image.manifest.name}?tab=tags" />
                </sequential>

                <!-- else condition for the above sequential using unless:true -->
                <echo unless:true="${image.manifest.repository.push}" level="info" message="Manifest not pushed to ${image.manifest.repository} by default. To push, specify -Dimage.manifest.repository.push=true" />

              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
