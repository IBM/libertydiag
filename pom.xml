<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
  
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>libertydiag</artifactId>
  <version>0.1.20230117</version>
  <packaging>war</packaging>

  <!-- Override these with mvn -D${PROPERTY}=${VALUE} -->
  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!--____________________
       |                    |
       | Liberty properties |
       |____________________|
                             -->

    <liberty.server.name>${project.artifactId}Server</liberty.server.name>

    <!--
      For background on packaging types, see:
      * https://github.com/OpenLiberty/ci.maven/blob/main/docs/package.md#package
      * https://www.ibm.com/docs/en/was-liberty/nd?topic=line-server-command-options
    -->
    <liberty.packaging.type>minify,runnable</liberty.packaging.type>

    <!-- OpenLiberty (ol) or WebSphere Liberty (wlp): https://github.com/OpenLiberty/ci.maven#build -->
    <runtime>ol</runtime>

    <!--
      These values get generated into liberty-plugin-variable-config.xml which is then
      put into configDropins/overrides.
      When changing a default here, it's usually good to change it in src/main/liberty/config/server.xml also.
    -->
    <liberty.var.APP_NAME>${project.artifactId}.war</liberty.var.APP_NAME>
    <liberty.var.HTTP_PORT>9080</liberty.var.HTTP_PORT>
    <liberty.var.HTTPS_PORT>9443</liberty.var.HTTPS_PORT>
    <liberty.var.MAX_TRACE_SIZE_MB>100</liberty.var.MAX_TRACE_SIZE_MB>
    <liberty.var.MAX_TRACE_SIZE_COUNT>2</liberty.var.MAX_TRACE_SIZE_COUNT>
    <liberty.var.MAX_CONCURRENT_THREADS>50</liberty.var.MAX_CONCURRENT_THREADS>
    <liberty.var.TRACE_SPECIFICATION>*=info</liberty.var.TRACE_SPECIFICATION>
    
    <!--____________________________
       |                            |
       | Container build properties |
       |____________________________|
                                     -->

    <image.builder>podman</image.builder>
    <image.name>${project.artifactId}</image.name>
    <image.authors>kevin.grigorenko@us.ibm.com,brenthdaniel@gmail.com</image.authors>
    <image.summary>Liberty diagnostic web application</image.summary>
    <image.vendor>${image.user}</image.vendor>
    <image.description>libertydiag is a Jakarta EE 9 and MicroProfile 5 web application for simulating diagnostic situations</image.description>
    <image.url>https://github.com/IBM/libertydiag</image.url>
    <image.source>https://github.com/IBM/libertydiag</image.source>

    <!-- image.user is either blank or must be lower case and end with a / -->
    <image.user></image.user>

    <!-- image.repository is either blank or otherwise must end with a / -->
    <image.repository>localhost/</image.repository>

    <image.tag>latest</image.tag>

    <!--
      Whether or not to build the main Containerfile when running deploy
      This is usually true but it might be useful to set it to false when
      only wanting to test InstantOn builds
    -->
    <image.build>true</image.build>

    <image.build.linux.amd64>true</image.build.linux.amd64>

    <!-- TODO: The Liberty build fails for ppc64le on the `RUN features.sh` step at the time of this writing -->
    <image.build.linux.ppc64le>false</image.build.linux.ppc64le>

    <!-- TODO: The Liberty build fails for s390x on the `RUN features.sh` step at the time of this writing -->
    <image.build.linux.s390x>false</image.build.linux.s390x>

    <!-- The Liberty images aren't built for arm64 at the time of this writing -->
    <image.build.linux.arm64>false</image.build.linux.arm64>

    <!-- Building the 'instant on' image may not work on all platforms -->
    <image.build.instanton>false</image.build.instanton>
    <image.build.instanton.tag>instanton</image.build.instanton.tag>

    <image.manifest.repository.push>false</image.manifest.repository.push>

    <image.manifest.repository>quay.io</image.manifest.repository>

    <image.manifest.user>ibm</image.manifest.user>

    <image.manifest.name>${image.name}</image.manifest.name>

    <image.manifest.tag>${image.tag}</image.manifest.tag>

    <!-- Any other arguments to pass to the image builder -->
    <image.builder.arguments></image.builder.arguments>
  </properties>

  <profiles>
    <profile>
      <id>usr-package</id>
      <properties>
        <packaging.type>usr</packaging.type>
      </properties>
    </profile>
  </profiles>

  <dependencies>
    <dependency>
      <groupId>org.eclipse.microprofile</groupId>
      <artifactId>microprofile</artifactId>
      <version>5.0</version>
      <type>pom</type>
      <scope>provided</scope>
    </dependency>
    <!--
    We don't need much from JakartaEE Full, so use the Web profile instead
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-api</artifactId>
      <version>9.1.0</version>
      <scope>provided</scope>
    </dependency>
    -->
    <dependency>
      <groupId>jakarta.platform</groupId>
      <artifactId>jakarta.jakartaee-web-api</artifactId>
      <version>9.1.0</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <!-- Use filtering to put variables into a properties file: https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/maven.properties</include>
        </includes>
      </resource>
    </resources>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.10.1</version>
          <configuration>
            <compilerArgs>
              <arg>-Xlint</arg>
            </compilerArgs>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-war-plugin</artifactId>
          <version>3.3.2</version>
        </plugin>
        <plugin>
          <groupId>io.openliberty.tools</groupId>
          <artifactId>liberty-maven-plugin</artifactId>
          <version>3.7.1</version>
          <configuration>
            <serverName>${liberty.server.name}</serverName>
            <include>${liberty.packaging.type}</include>
            <mergeServerEnv>true</mergeServerEnv>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <configuration>
            <!--
              Disable the default deploy plugin so that we can
              use the deploy phase to build the container.
            -->
            <skip>true</skip>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>io.openliberty.tools</groupId>
        <artifactId>liberty-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- Run some 'liberty:' goals during the Maven 'package' phase -->
            <phase>package</phase>
            <goals>
              <!-- See https://gitter.im/OpenLiberty/development?at=606d08bc92a3431fd67c7aab -->
              <goal>create</goal>
              <goal>install-feature</goal>
              <goal>deploy</goal>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>deploy</phase>
            <configuration>
              <target xmlns:if="ant:if" xmlns:unless="ant:unless">
                <!--
                  Notes for Ant features used:

                  * https://ant.apache.org/manual/Tasks/
                  * https://ant.apache.org/manual/Tasks/exec.html
                  * https://ant.apache.org/manual/ifunless.html
                  * https://ant.apache.org/manual/Tasks/conditions.html
                  * https://ant.apache.org/manual/Tasks/echo.html
                  * We use <sequential /> as a way to do a block if condition and then an unless:true for an else condition.
                  * Combine the <sequential /> with a <condition /> to do various logic.
                -->

                <echo level="info" message="==================" />
                <echo level="info" message="Building container image from ${project.basedir} using ${image.builder}" />

                <!--
                <echo level="info" message="All properties" />
                <echoproperties />
                -->

                <!-- Get commit hash and put it into a variable for an image build argument -->
                <exec
                  dir="${project.basedir}"
                  executable="git"
                  failonerror="true"
                  outputproperty="commit.id"
                >
                  <arg value="rev-parse" />
                  <arg value="HEAD" />
                </exec>

                <!-- First remove/recreate any existing manifests -->
                <sequential if:true="${image.build}">
                  <echo level="info" message="==================" />

                  <echo level="info" message="Create the manifest for ${image.repository}${image.user}${image.name}:${image.tag} if it does not exist" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="false" errorproperty="trash" resultproperty="rc">
                    <arg value="manifest" />
                    <arg value="create" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                  </exec>

                  <condition property="conditionResult">
                    <equals arg1="${rc}" arg2="125" />
                  </condition>
                  <sequential if:true="${conditionResult}">
                    <echo level="info" message="Code 125 means the manifest already exists. Clearing it..." />
                    <exec osfamily="unix" dir="${project.basedir}" executable="./cleanmanifest.sh" failonerror="true">
                      <arg value="${image.builder}" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    </exec>
                    <exec osfamily="windows" dir="${project.basedir}" executable="cleanmanifest.bat" failonerror="true">
                      <arg value="${image.builder}" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    </exec>
                  </sequential>
                </sequential>

                <sequential if:true="${image.build.instanton}">
                  <echo level="info" message="==================" />

                  <echo level="info" message="Create the InstantOn manifest for ${image.repository}${image.user}${image.name}:${image.build.instanton.tag} if it does not exist" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="false" errorproperty="trash" resultproperty="rc">
                    <arg value="manifest" />
                    <arg value="create" />
                    <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                  </exec>

                  <condition property="conditionResult">
                    <equals arg1="${rc}" arg2="125" />
                  </condition>
                  <sequential if:true="${conditionResult}">
                    <echo level="info" message="Code 125 means the manifest already exists. Clearing it..." />
                    <exec osfamily="unix" dir="${project.basedir}" executable="./cleanmanifest.sh" failonerror="true">
                      <arg value="${image.builder}" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                    </exec>
                    <exec osfamily="windows" dir="${project.basedir}" executable="cleanmanifest.bat" failonerror="true">
                      <arg value="${image.builder}" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                    </exec>
                  </sequential>
                </sequential>

                <sequential if:true="${image.build}">
                  <echo level="info" message="==================" />

                  <sequential if:true="${image.build.linux.amd64}">
                    <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/amd64" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="build" />
                      <arg value="--platform" />
                      <arg value="linux/amd64" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="REVISION=${commit.id}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--build-arg" />
                      <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                      <arg value="--build-arg" />
                      <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                      <arg value="--manifest" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="." />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/amd64" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm --platform linux/amd64 -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  </sequential>

                  <sequential if:true="${image.build.linux.arm64}">
                    <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/arm64" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="build" />
                      <arg value="--platform" />
                      <arg value="linux/arm64" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="REVISION=${commit.id}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--build-arg" />
                      <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                      <arg value="--build-arg" />
                      <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                      <arg value="--manifest" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="." />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/arm64" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm --platform linux/arm64 -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  </sequential>

                  <sequential if:true="${image.build.linux.ppc64le}">
                    <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/ppc64le" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="build" />
                      <arg value="--platform" />
                      <arg value="linux/ppc64le" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="REVISION=${commit.id}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--build-arg" />
                      <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                      <arg value="--build-arg" />
                      <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                      <arg value="--manifest" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="." />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/ppc64le" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm --platform linux/ppc64le -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  </sequential>

                  <sequential if:true="${image.build.linux.s390x}">
                    <echo level="info" message="Building ${image.repository}${image.user}${image.name}:${image.tag} for linux/s390x" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="build" />
                      <arg value="--platform" />
                      <arg value="linux/s390x" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="REVISION=${commit.id}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--build-arg" />
                      <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                      <arg value="--build-arg" />
                      <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                      <arg value="--manifest" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="." />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.tag} for linux/s390x" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm --platform linux/s390x -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.tag}" />
                  </sequential>
                </sequential>

                <sequential if:true="${image.build.instanton}">
                  <echo level="info" message="==================" />

                  <sequential if:true="${image.build.linux.amd64}">
                    <echo level="info" message="Building InstantOn ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp for linux/amd64" />
                    <!-- InstantOn is currently limited to podman -->
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="build" />
                      <arg value="--platform" />
                      <arg value="linux/amd64" />
                      <arg value="--cap-add"/>
                      <arg value="CHECKPOINT_RESTORE"/>
                      <arg value="--cap-add" />
                      <arg value="NET_ADMIN" />
                      <arg value="--cap-add" />
                      <arg value="SYS_PTRACE" />
                      <arg value="--security-opt" />
                      <arg value="seccomp=unconfined" />
                      <arg value="--build-arg" />
                      <arg value="VERSION=${project.version}" />
                      <arg value="--build-arg" />
                      <arg value="REVISION=${commit.id}" />
                      <arg value="--build-arg" />
                      <arg value="AUTHORS=${image.authors}" />
                      <arg value="--build-arg" />
                      <arg value="VENDOR=${image.vendor}" />
                      <arg value="--build-arg" />
                      <arg value="SUMMARY=${image.summary}" />
                      <arg value="--build-arg" />
                      <arg value="NAME=${image.name}" />
                      <arg value="--build-arg" />
                      <arg value="DESCRIPTION=${image.description}" />
                      <arg value="--build-arg" />
                      <arg value="URL=${image.url}" />
                      <arg value="--build-arg" />
                      <arg value="SOURCE=${image.source}" />
                      <arg value="--build-arg" />
                      <arg value="HTTP_PORT=${liberty.var.HTTP_PORT}" />
                      <arg value="--build-arg" />
                      <arg value="HTTPS_PORT=${liberty.var.HTTPS_PORT}" />
                      <arg value="--file" />
                      <arg value="Containerfile.instanton" />
                      <arg value="-t" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp" />
                      <arg line="${image.builder.arguments}" />
                      <arg value="." />
                    </exec>

                    <!-- Run the image to generate the CheckPoint container -->
                    <echo level="info" message="Running ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp for linux/amd64 to generate checkpoint" />
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="run" />
                      <arg value="--platform" />
                      <arg value="linux/amd64" />
                      <arg value="--name" />
                      <arg value="instanton-temp" />
                      <arg value="--privileged" />
                      <arg value="--env" />
                      <arg value="WLP_CHECKPOINT=applications" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp" />
                    </exec>

                    <echo level="info" message="Committing ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp for linux/amd64" />
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="commit" />
                      <arg value="${image.build.instanton.tag}-temp" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-image" />
                    </exec>

                    <echo level="info" message="Removing temporary container" />
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="rm" />
                      <arg value="${image.build.instanton.tag}-temp" />
                    </exec>

                    <echo level="info" message="Removing temporary image" />
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="rmi" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-temp" />
                    </exec>

                    <echo level="info" message="Add the linux/amd64 InstantOn image of ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-image into the manifest" />
                    <exec dir="${project.basedir}" executable="podman" failonerror="true">
                      <arg value="manifest" />
                      <arg value="add" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                      <arg value="containers-storage:${image.repository}${image.user}${image.name}:${image.build.instanton.tag}-image" />
                    </exec>

                    <echo level="info" message="==================" />
                    <echo level="info" message="Created local container image ${image.repository}${image.user}${image.name}:${image.build.instanton.tag} for linux/amd64" />
                    <echo level="info" message="To run this image:" />
                    <echo level="info" message="  ${image.builder} run --rm --privileged --platform linux/amd64 -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                  </sequential>
                </sequential>

                <!--
                  Finally, we can push these to a remote repository if the argument is set
                -->
                <sequential if:true="${image.manifest.repository.push}">
                  <echo level="info" message="==================" />
                  <echo level="info" message="Logging into ${image.manifest.repository}" />
                  <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                    <arg value="login" />
                    <arg value="${image.manifest.repository}" />
                  </exec>

                  <sequential if:true="${image.build}">
                    <echo level="info" message="==================" />
                    <echo level="info" message="Inspecting manifest for ${image.repository}${image.user}${image.name}:${image.tag}" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="manifest" />
                      <arg value="inspect" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                    </exec>
                    <echo level="info" message="Pushing manifest to ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="manifest" />
                      <arg value="push" />
                      <arg value="--all" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.tag}" />
                      <arg value="docker://${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                    </exec>
                    <echo level="info" message="Pushed manifest successfully. Test with:" />
                    <echo level="info" message="  ${image.builder} run --pull=newer --rm -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.manifest.tag}" />
                  </sequential>

                  <sequential if:true="${image.build.instanton}">
                    <echo level="info" message="==================" />
                    <echo level="info" message="Inspecting manifest for ${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="manifest" />
                      <arg value="inspect" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                    </exec>
                    <echo level="info" message="Pushing InstantOn manifest to ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.build.instanton.tag}" />
                    <exec dir="${project.basedir}" executable="${image.builder}" failonerror="true">
                      <arg value="manifest" />
                      <arg value="push" />
                      <arg value="--all" />
                      <arg value="${image.repository}${image.user}${image.name}:${image.build.instanton.tag}" />
                      <arg value="docker://${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.build.instanton.tag}" />
                    </exec>
                    <echo level="info" message="Pushed InstantOn manifest successfully. Test with:" />
                    <echo level="info" message="  ${image.builder} run --pull=newer --rm --privileged -p ${liberty.var.HTTP_PORT}:${liberty.var.HTTP_PORT} -p ${liberty.var.HTTPS_PORT}:${liberty.var.HTTPS_PORT} -it ${image.manifest.repository}/${image.manifest.user}/${image.manifest.name}:${image.build.instanton.tag}" />
                  </sequential>

                  <echo level="info" message="Quay.io home page is: https://${image.manifest.repository}/repository/${image.manifest.user}/${image.manifest.name}?tab=tags" />

                </sequential>

                <!-- else condition for the above sequential -->
                <echo unless:true="${image.manifest.repository.push}" level="info" message="Manifest not pushed to ${image.manifest.repository} by default. To push, specify -Dimage.manifest.repository.push=true" />

              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
